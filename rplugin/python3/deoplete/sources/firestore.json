{
  "access_controls": [
    {
      "word": "read",
      "menu": "Allows `create`, `update` and `delete` operations",
      "_include": ["get", "list"]
    },
    {
      "word": "write",
      "menu": "Allows `create`, `update` and `delete` operations",
      "_include": ["create", "update", "delete"]
    },
    { "word": "get", "menu": "Corresponds to `get()` query method" },
    { "word": "list", "menu": "Corresponds to `where().get()` query method" },
    {
      "word": "create",
      "menu": "Corresponds to `set()` and `add()` query methods"
    },
    { "word": "update", "menu": "Corresponds to `update()` query method" },
    { "word": "delete", "menu": "Corresponds to `remove()` query method" }
  ],
  "globals": [
    {
      "word": "path(",
      "abbr": "path",
      "menu": "(func) path(string) -> path",
      "info": "Converts a string argument to a path."
    },
    {
      "word": "exists(",
      "abbr": "exists",
      "menu": "(func) exists(path) -> bool",
      "info": "Check if a document exists. `exists()` takes a path and returns a bool, indicating whether a document exists at that path. The path provided must begin with `/databases/$(database)/documents`."
    },
    {
      "word": "get(",
      "abbr": "get",
      "menu": "(func) get(path) -> resource",
      "info": "Get the contents of a firestore document. `get()` takes a path and returns the resource at that path. Like `exists()`, the path provided must begin with `/databases/$(database)/documents`."
    },
    {
      "word": "getAfter(",
      "abbr": "getAfter",
      "menu": "(func) getAfter(path) -> resource",
      "info": "Get the projected contents of a document. The document is returned as if the current request had succeeded. Useful for validating documents that are part of a batched write or transaction."
    },
    {
      "word": "math",
      "menu": "(var) Mathematics helper functions",
      "info": "Cloud Firestore Security Rules also provides a number of mathematics helper functions to simplify expressions."
    },
    {
      "word": "request",
      "menu": "(var) The request variable",
      "info": "The request variable is provided within a condition to represent the request being made at that path. The request variable has a number of properties which can be used to decide whether to allow the incoming request."
    }
  ],
  "methods": {
    "math": [
      {
        "word": "ceil(",
        "abbr": "ceil",
        "menu": "(method) ceil(number) -> int",
        "info": "Ceiling of the numeric value"
      },
      {
        "word": "floor(",
        "abbr": "floor",
        "menu": "(method) floor(number) -> int",
        "info": "Floor of the numeric value"
      },
      {
        "word": "round(",
        "abbr": "round",
        "menu": "(method) round(number) -> int",
        "info": "Round the input value to the nearest `int`"
      },
      {
        "word": "abs(",
        "abbr": "abs",
        "menu": "(method) abs(number) -> int",
        "info": "Absolute value of the input"
      },
      {
        "word": "isInfinite(",
        "abbr": "isInfinite",
        "menu": "(method) isInfinite(number) -> bool",
        "info": "Test whether the value is ±∞, returns a `bool`"
      },
      {
        "word": "isNaN(",
        "abbr": "isNaN",
        "menu": "(method) isNaN(number) -> bool",
        "info": "Test whether the value is not a number `NaN`, returns a `bool`"
      }
    ],
    "request": [
      {
        "word": "path",
        "menu": "(prop) path (path)",
        "info": "The path variable contains the path that a request is being performed against."
      },
      {
        "word": "resource",
        "menu": "(prop) resource (resource)",
        "info": "The resource variable contains data and metadata about the document being written. It is closely related to the request variable, which contains the current document at the requested path, as opposed to the document being written."
      },
      {
        "word": "time",
        "menu": "(prop) time (timestamp)",
        "info": "The time variable contains a timestamp representing the current server time a request is being evaluated at. You can use this to provide time-based access to files, such as: only allowing files to be uploaded until a certain date, or only allowing files to be read up to an hour after they were uploaded.",
        "_type": "timestamp"
      },
      {
        "word": "auth",
        "menu": "(prop) auth (map)",
        "info": "When an authenticated user performs a request against Cloud Firestore, the auth variable is populated with the user's uid (`request.auth.uid`) as well as the claims of the Firebase Authentication JWT (`request.auth.token`)."
      }
    ],
    "request.resource": [
      {
        "word": "data",
        "menu": "(prop) data (map)",
        "info": "Developer provided data is surfaced in request.resource.data, which is a map containing the fields and values.",
        "_type": "map"
      }
    ],
    "request.auth": [
      {
        "word": "uid",
        "menu": "(prop) uid (string)",
        "info": "The user's Firebase UID. This is unique within a project.",
        "_type": "string"
      },
      {
        "word": "token",
        "menu": "(prop) token (map)",
        "info": "Firebase Authentication JWT"
      }
    ],
    "request.auth.token": [
      {
        "word": "email",
        "menu": "(prop) email (string)",
        "info": "The email address associated with the account, if present.",
        "_type": "string"
      },
      {
        "word": "email_verified",
        "menu": "(prop) email_verified (string)",
        "info": "`true` if the user has verified they have access to the `email` address. Some providers automatically verify email addresses they own."
      },
      {
        "word": "phone_number",
        "menu": "(prop) phone_number (string)",
        "info": "The phone number associated with the account, if present.",
        "_type": "string"
      },
      {
        "word": "name",
        "menu": "(prop) name (string)",
        "info": "The user's display name, if set.",
        "_type": "string"
      },
      {
        "word": "sub",
        "menu": "(prop) sub (string)",
        "info": "The user's Firebase UID. This is unique within a project.",
        "_type": "string"
      },
      {
        "word": "firebase",
        "menu": "(prop) firebase (map)",
        "info": "Firebase specific token properties."
      }
    ],
    "request.auth.token.firebase": [
      {
        "word": "identities",
        "menu": "(prop) identities (map)",
        "info": "Dictionary of all the identities that are associated with this user's account. The keys of the dictionary can be any of the following: email, phone, google.com, facebook.com, github.com, twitter.com. The values of the dictionary are arrays of unique identifiers for each identity provider associated with the account. For example, auth.token.firebase.identities['google.com'][0] contains the first Google user ID associated with the account.",
        "_type": "map"
      },
      {
        "word": "sign_in_provider",
        "menu": "(prop) sign_in_provider (string)",
        "info": "The sign-in provider used to obtain this token. Can be one of the following strings: custom, password, phone, anonymous, google.com, facebook.com, github.com, twitter.com.",
        "_type": "string"
      }
    ]
  },
  "types": {
    "firestore": [
      {
        "word": "path(",
        "abbr": "path",
        "menu": "(func) path(string) -> path",
        "info": "Converts a string argument to a path."
      },
      {
        "word": "exists(",
        "abbr": "exists",
        "menu": "(func) exists(path) -> bool",
        "info": "Check if a document exists. `exists()` takes a path and returns a bool, indicating whether a document exists at that path. The path provided must begin with `/databases/$(database)/documents`."
      },
      {
        "word": "get(",
        "abbr": "get",
        "menu": "(func) get(path) -> resource",
        "info": "Get the contents of a firestore document. `get()` takes a path and returns the resource at that path. Like `exists()`, the path provided must begin with `/databases/$(database)/documents`.",
        "_type": "resource"
      },
      {
        "word": "getAfter(",
        "abbr": "getAfter",
        "menu": "(func) getAfter(path) -> resource",
        "info": "Get the projected contents of a document. The document is returned as if the current request had succeeded. Useful for validating documents that are part of a batched write or transaction.",
        "_type": "resource"
      }
    ],
    "string": [
      {
        "word": "size(",
        "abbr": "size",
        "menu": "(method) size() -> int",
        "info": "Returns the number of characters in the string."
      },
      {
        "word": "matches(",
        "abbr": "matches",
        "menu": "(method) matches(string) -> bool",
        "info": "Performs a regular expression match, returns `true` if the string matches the given regular expression. Uses Google RE2 syntax."
      },
      {
        "word": "split(",
        "abbr": "split",
        "menu": "(method) split(string) -> list",
        "info": "Splits a string according to a provided regular expression and returns a list of strings. Uses Google RE2 syntax.",
        "_type": "list"
      }
    ],
    "timestamp": [
      {
        "word": "date(",
        "abbr": "date",
        "menu": "(method) date() -> timestamp",
        "info": "A timestamp value containing the year, month, and day only.",
        "_type": "timestamp"
      },
      {
        "word": "day(",
        "abbr": "day",
        "menu": "(method) day() -> int",
        "info": "The current day of the month as an `int`, from 1 to 31."
      },
      {
        "word": "dayOfWeek(",
        "abbr": "dayOfWeek",
        "menu": "(method) dayOfWeek() -> int",
        "info": "The day of the week, from 1 (Monday) to 7 (Sunday)."
      },
      {
        "word": "dayOfYear(",
        "abbr": "dayOfYear",
        "menu": "(method) dayOfYear() -> int",
        "info": "The day of the current year, from 1 to 366."
      },
      {
        "word": "hours(",
        "abbr": "hours",
        "menu": "(method) hours() -> int",
        "info": "The hours value as an `int`, from 0 to 23."
      },
      {
        "word": "minutes(",
        "abbr": "minutes",
        "menu": "(method) minutes() -> int",
        "info": "The minutes value as an `int`, from 0 to 59."
      },
      {
        "word": "month(",
        "abbr": "month",
        "menu": "(method) month() -> int",
        "info": "The month value as an `int`, from 1 to 12."
      },
      {
        "word": "nanos(",
        "abbr": "nanos",
        "menu": "(method) nanos() -> int",
        "info": "The fractional seconds in nanos as an `int`."
      },
      {
        "word": "seconds(",
        "abbr": "seconds",
        "menu": "(method) seconds() -> int",
        "info": "The seconds value as an int, from 0 to 59."
      },
      {
        "word": "time(",
        "abbr": "time",
        "menu": "(method) time() -> duration",
        "info": "A `duration` value containing the current time.",
        "_type": "duration"
      },
      {
        "word": "toMillis(",
        "abbr": "toMillis",
        "menu": "(method) toMillis() -> int",
        "info": "Returns the current number of milliseconds since the Unix epoch."
      },
      {
        "word": "year(",
        "abbr": "year",
        "menu": "(method) year() -> int",
        "info": "The year value as an `int`, from 1 to 9999."
      }
    ],
    "duration": [
      {
        "word": "seconds(",
        "abbr": "seconds",
        "menu": "(method) seconds() -> int",
        "info": "The number of seconds in the current duration. Must be between -315,576,000,000 and +315,576,000,000 inclusive."
      },
      {
        "word": "nanos(",
        "abbr": "nanos",
        "menu": "(method) nanos() -> int",
        "info": "The number of fractional seconds (in nanoseconds) of the current duration. Must be beween -999,999,999 and +999,999,999 inclusive. For non-zero seconds and non-zero nanonseconds, the signs of both must be in agreement."
      }
    ],
    "list": [
      {
        "word": "join(",
        "abbr": "join",
        "menu": "(method) join(string) -> string",
        "info": "Combines a list of strings into a single string, separated by the given string.",
        "_type": "string"
      },
      {
        "word": "size(",
        "abbr": "size",
        "menu": "(method) size() -> int",
        "info": "The number of items in the list."
      },
      {
        "word": "hasAny(",
        "abbr": "hasAny",
        "menu": "(method) hasAny(list) -> bool",
        "info": "Returns `true` if any given values are present in the list."
      },
      {
        "word": "hasAll(",
        "abbr": "hasAll",
        "menu": "(method) hasAll(list) -> bool",
        "info": "Returns `true` if all values are present in the list."
      },
      {
        "word": "hasOnly(",
        "abbr": "hasOnly",
        "menu": "(method) hasOnly(list) -> bool",
        "info": "Determine whether all elements in the list are present in another list."
      }
    ],
    "map": [
      {
        "word": "size(",
        "abbr": "size",
        "menu": "(method) size() -> int",
        "info": "The number of keys in the map."
      },
      {
        "word": "keys(",
        "abbr": "keys",
        "menu": "(method) keys() -> list",
        "info": "A list of all keys in the map.",
        "_type": "list"
      },
      {
        "word": "values(",
        "abbr": "values",
        "menu": "(method) values() -> list",
        "info": "A list of all values in the map, in key order.",
        "_type": "list"
      }
    ],
    "resource": [
      {
        "word": "data",
        "abbr": "data",
        "menu": "(prop) data (map)",
        "info": "Developer provided data is surfaced in request.resource.data, which is a map containing the fields and values.",
        "_type": "map"
      }
    ]
  }
}
